---
import { projects, type Project } from '@/data/projects'
import type { ImageMetadata } from 'astro'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'

const images = import.meta.glob<{ default: ImageMetadata }>('../assets/img/project-*.png')
---

<section class="work container" id="projects">
  <div class="header" data-reveal>
    <p class="subtitle">Area of Expertise</p>
    <h2 class="title">Selected<br />Works</h2>
    <p class="description">
      Over the past 4 years, I've had the privilege to work on so many cool projects, i’ve worked in areas including
      APIs and Integration, responsive web design, eCommerce, CMS, SEO... Here's a few.
    </p>
  </div>

  <div class="content">
    <ul>
      {
        projects.map((project: Project, key: number) => (
          <li data-reveal>
            <div class="project" data-target={`project-${key}`}>
              <p class="name">
                <>
                  <span>
                    {project.name} - {project.platform}
                  </span>
                  <i />
                </>
              </p>
              <span class="role">{project.role}</span>
              <span class="year">{project.year}</span>
            </div>
          </li>
        ))
      }
    </ul>
    <p class="more" data-reveal>
      <Icon name="arrow-down" width={18} height={18} />
      <u>See all projects</u>
      <sup>({projects.length})</sup>
    </p>
  </div>
</section>

{
  projects.map((project: Project, key: number) => (
    <div class="work-description" id={`project-${key}`}>
      <div class="container">
        <button class="back">
          <svg xmlns="http://www.w3.org/2000/svg" width="10" height="10" fill="none" viewBox="0 0 10 10">
            <path stroke="#fff" stroke-linecap="round" stroke-linejoin="round" d="M9 5H1m0 0 4 4M1 5l4-4" />
          </svg>
          Back
        </button>
        <p class="title">{project.name}</p>
        {project.link && (
          typeof project.link !== "object" ? (
            <a class="link" target="_blank" href={'https://' + project.link}>
              {project.link}
              <Icon name="arrow-top-right" width={16} height={16} />
            </a>
          ) : (
            <a href={project.link[0]}>App store</a>
            <a href={project.link[1]}>Google play</a>
          )
        )}
        <div class="info">
          <div class="details">
            <p class="brief">{project.description}</p>
            <ul>
              <li>
                <b>Industry</b>
                {project.industry}
              </li>
              <li>
                <b>Status</b>
                {project.status}
              </li>
              <li>
                <b>Technologies</b>
                {project.techs?.join(', ')}
              </li>
              <li>
                <b>Role</b>
                {project.role}
              </li>
            </ul>
          </div>
          <ul class="challenges">
            {project.challenges && (
              <li>
                <b>Challenges</b>
                <ul>
                  {project.challenges.map((challenge) => (
                    <li>⬩ {challenge}.</li>
                  ))}
                </ul>
              </li>
            )}
            {project.solutions && (
              <li>
                <b>Solutions</b>
                <ul>
                  {project.solutions.map((solution) => (
                    <li>⬩ {solution}.</li>
                  ))}
                </ul>
              </li>
            )}
          </ul>
        </div>
        <div class="images">
          {project.images?.map((src: string) => (
            <li>
              <Image src={images[`../assets/img/project-${src}.png`]()} alt={project.name} width="557" height="317" />
            </li>
          ))}
        </div>
      </div>
    </div>
  ))
}

<script>
  // show more
  const more = document.querySelector('.work .more')
  const list = document.querySelector('.work ul')
  more?.addEventListener('click', () => {
    more.remove()
    list?.classList.add('active')
  })

  // show details
  document.querySelectorAll('.work .project').forEach((project) => {
    project.addEventListener('click', () => {
      let target = document.querySelector(`#${project.dataset.target}`)
      target.classList.add('show')
    })
  })

  document.querySelectorAll('.work-description .back').forEach((button) => {
    button.addEventListener('click', () => {
      let target = button.closest('.work-description')
      target.classList.remove('show')
    })
  })

  const siders = document.querySelectorAll('.work-description .images')
  siders?.forEach((sider) => {
    sider.style.cursor = 'grab'

    let pos = { top: 0, left: 0, x: 0, y: 0 }

    const mouseDownHandler = function (e) {
      sider.style.cursor = 'grabbing'

      pos = {
        left: sider.scrollLeft,
        top: sider.scrollTop,
        // Get the current mouse position
        x: e.clientX,
        y: e.clientY,
      }

      document.addEventListener('mousemove', mouseMoveHandler)
      document.addEventListener('mouseup', mouseUpHandler)
    }

    const mouseMoveHandler = function (e) {
      // How far the mouse has been moved
      const dx = e.clientX - pos.x
      const dy = e.clientY - pos.y

      // Scroll the element
      sider.scrollTop = pos.top - dy
      sider.scrollLeft = pos.left - dx
    }

    const mouseUpHandler = function () {
      sider.style.cursor = 'grab'

      document.removeEventListener('mousemove', mouseMoveHandler)
      document.removeEventListener('mouseup', mouseUpHandler)
    }

    // Attach the handler
    sider.addEventListener('mousedown', mouseDownHandler)
  })
</script>

<style lang="scss">
  .work {
    position: relative;
    margin-top: 150px;
    margin-bottom: 150px;
    z-index: 100;
    .content {
      max-width: 760px;
    }
    .subtitle {
      font-size: 11px;
    }
    .title {
      font-size: 64px;
      margin: 30px 0;
      font-family: var(--font-family-secondary);
    }
    .description {
      font-size: 13px;
      margin: 0 0 70px;
      max-width: 478px;
      p {
        margin-bottom: 6px;
      }
      b {
        font-weight: bold;
      }
    }
    .more {
      font-size: 18px;
      display: flex;
      column-gap: 7px;
      align-items: center;
      text-transform: uppercase;
      margin: 20px auto 0;
      width: max-content;
      cursor: pointer;
      sup {
        margin-top: -10px;
        font-size: 12px;
      }
      svg {
        margin-top: 2px;
      }
    }
    ul {
      &:not(.active) {
        max-height: 540px;
        overflow: hidden;
        position: relative;
        &::after {
          content: '';
          width: 100%;
          height: 100%;
          pointer-events: none;
          background: linear-gradient(0deg, rgba(0, 0, 0, 1) 0%, rgba(0, 0, 0, 0.1) 100%);
          position: absolute;
          left: 0;
          top: 0;
          z-index: 1;
          transition: opacity 0.6s ease;
        }
      }

      li {
        transition: opacity 0.6s ease;
        &:hover {
          z-index: 2;
          position: relative;
        }
        &.active:hover {
          opacity: 1 !important;
        }
      }
    }
    .project {
      display: grid;
      align-items: center;
      column-gap: 10px;
      cursor: pointer;
      padding: 20px 0;
      grid-template-columns: minmax(0, 1fr) repeat(2, auto);
    }
    .name {
      font-size: 18px;
      font-weight: 500;
      display: flex;
      align-items: center;
      column-gap: 10px;
      i {
        flex: 1;
        height: 1px;
        background-color: rgb(255, 255, 255, 0.1);
      }
    }

    .role {
      font-size: 13px;
    }
    .year {
      font-size: 11px;
    }

    &-description {
      position: fixed;
      top: 0;
      left: 0;
      background-color: #0d0d0d;
      transition: all 0.5s cubic-bezier(0.47, 0, 0.745, 0.715);
      width: 100%;
      z-index: 110;
      overflow-y: auto;
      height: 100vh;
      padding: 200px 0 100px;
      &:not(.show) {
        top: 100vw;
        opacity: 0;
        pointer-events: none;
      }
      img {
        border-radius: 15px;
        pointer-events: none;
        max-width: unset;
      }

      .title {
        font-size: 160px;
        margin-bottom: 54px;
      }
      .back {
        background-color: transparent;
        color: #fff;
      }
      .images {
        list-style: none;
        display: flex;
        overflow-x: auto;
        -ms-overflow-style: none; /* Internet Explorer 10+ */
        scrollbar-width: none; /* Firefox */
        width: calc(100vw - (100vw - 1712px) / 2);
        user-select: none;
        max-width: calc(100dvw - 20px);
        margin: 0 auto;
        &::-webkit-scrollbar {
          display: none; /* Safari and Chrome */
        }
        li {
          padding-right: 40px;
        }
      }

      .info {
        display: flex;
        justify-content: space-between;
        margin: 70px 0 80px;
        b {
          display: block;
          font-weight: 700;
          margin-bottom: 10px;
        }
      }

      .link {
        text-transform: uppercase;
        font-weight: 700;
      }
      .challenges {
        max-width: 433px;
        > li:not(:last-child) {
          margin-bottom: 40px;
        }
      }
      .brief {
        margin-bottom: 40px;
      }
      .details {
        max-width: 595px;
        ul {
          display: grid;
          grid-template-columns: repeat(2, auto);
          row-gap: 40px;
          column-gap: 40px;
        }
      }
    }
    @media (max-width: 655px) {
      margin-top: 60px;
      margin-bottom: 40px;
    }
  }
</style>
