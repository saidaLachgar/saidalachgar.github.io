---
import { playground, projects, type Project } from '@/data/projects'
import type { ImageMetadata } from 'astro'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'

const imagesProjects = import.meta.glob<{ default: ImageMetadata }>('../assets/img/project-*.png')
const imagesPlayground = import.meta.glob<{ default: ImageMetadata }>('../assets/img/playground-*.png')
const videos = import.meta.glob<{ default: string }>('../assets/videos/*.mp4', { eager: true })
const items = Array(9).fill('PLAYGROUND')

// for (let index = 1; index < 68; index++) {
//   try {
//     images[`../assets/img/project-${index}.png`]()
//   } catch (error) {
//     console.log('index bug', index)
//   }
// }
// console.log(images[`../assets/videos/mff.mp4`]())
---

<section class="work container" id="projects">
  <div class="header" data-reveal>
    <p class="subtitle">Area of Expertise</p>
    <h2 class="title">Selected<br />Works</h2>
    <p class="description">
      Over the past 4 years, I've had the privilege to work on so many cool projects, i’ve worked in areas including
      APIs and Integration, responsive web design, eCommerce, CMS, SEO... Here's a few.
    </p>
  </div>

  <div class="content">
    <ul>
      {
        projects.slice(0, 8).map((project: Project, key: number) => (
          <li data-reveal>
            <div class="project" data-target={`project-${key}`}>
              <p class="name">
                <>
                  <span>
                    {project.name} - {project.platform}
                  </span>
                  <i />
                </>
              </p>
              <span class="role">{project.role}</span>
              <span class="year">{project.year}</span>
            </div>
          </li>
        ))
      }
    </ul>
    <a href="/projects" class="more" data-reveal>
      <Icon name="arrow-top-right" width={27} height={27} />
      <u>See all projects</u>
      <sup>({projects.length + playground.length})</sup>
    </a>
  </div>
</section>

<section class="playground" id="playground">
  <div class="infinite-text" data-reveal>
    {items.map((item) => <p>{item} &nbsp;</p>)}
  </div>
  <div class="carousel-container">
    <div class="carousel-outer">
      <ul data-reveal class="carousel-inner">
        {
          playground.map((project: Project, key: number) => (
            <li data-target={`project-${key + 8}`}>
              {/* 8 is total shown projects in work section */}
              <div class="project">
                {project.images && (
                  <Image
                    src={imagesPlayground[`../assets/img/${project.images[project.images.length - 1]}.png`]()}
                    alt={project.name}
                    width="557"
                    height="533"
                  />
                )}
                <div class="infos">
                  <p>
                    <span class="name">{project.name}</span>
                    <span class="subtitle">{project.subtitle}</span>
                  </p>
                  <Icon name="arrow-top-right" width={30} height={30} />
                </div>
              </div>
              <div class="cursor">
                <span>View project</span>
              </div>
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</section>

{
  [...projects.slice(0, 8), ...playground].map((project: Project, key: number) => (
    <div class="work-description" id={`project-${key}`}>
      <div class="container">
        <button class="close">
          Close{' '}
          <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="none" viewBox="0 0 10 10">
            <path stroke="#fff" stroke-linecap="round" stroke-linejoin="round" d="M5 5 1 9m4-4L1 1m4 4 4-4M5 5l4 4" />
          </svg>
        </button>
        <p class="title">{project.name}</p>
        {project.link &&
          (typeof project.link !== 'object' ? (
            <a class="link" target="_blank" href={'https://' + project.link}>
              {project.link}
              <Icon name="arrow-top-right" width={16} height={16} />
            </a>
          ) : (
            Object.entries(project.link).map(([key, value]) => <a href={value}>{key}</a>)
          ))}
        <div class="info">
          <div class="details">
            <p class="brief">{project.description}</p>
            <ul>
              <li>
                <b>Industry</b>
                {project.industry}
              </li>
              <li>
                <b>Status</b>
                {project.status}
              </li>
              <li>
                <b>Technologies</b>
                {project.techs?.join(', ')}
              </li>
              <li>
                <b>Role</b>
                {project.role}
              </li>
            </ul>
          </div>
          <ul class="challenges">
            {project.challenges && (
              <li>
                <b>Challenges</b>
                <ul>
                  {project.challenges.map((challenge) => (
                    <li>⬩ {challenge}.</li>
                  ))}
                </ul>
              </li>
            )}
            {project.solutions && (
              <li>
                <b>Solutions</b>
                <ul>
                  {project.solutions.map((solution) => (
                    <li>⬩ {solution}.</li>
                  ))}
                </ul>
              </li>
            )}
          </ul>
        </div>
        <ul class="carousel">
          {project.images?.map((src: string) => (
            <li>
              {!!Number(src) ? (
                <Image
                  src={imagesProjects[`../assets/img/project-${src}.png`]()}
                  alt={project.name}
                  width="557"
                  height="317"
                />
              ) : (
                <video autoplay muted loop playsinline>
                  <source src={videos[`../assets/videos/${src}.mp4`]?.default} type="video/mp4" />
                  Your browser does not support the video tag.
                </video>
              )}
            </li>
          ))}
        </ul>
        <button class="next">
          Next project <Icon name="arrow-top-right" width={18} height={18} />
        </button>
      </div>
    </div>
  ))
}

<script>
  // show details
  document.querySelectorAll('[data-target]').forEach((project) => {
    project.addEventListener('click', () => {
      let target = document.querySelector(`#${project.dataset.target}`)
      target.classList.add('show')
    })
  })

  // close
  document.querySelectorAll('.work-description .close').forEach((button) => {
    button.addEventListener('click', () => {
      let target = button.closest('.work-description')
      target.classList.remove('show')
    })
  })

  // next
  document.querySelectorAll('.work-description .next').forEach((button) => {
    button.addEventListener('click', () => {
      // get next
      let target = button.closest('.work-description')
      let current = document.querySelector(`[data-target=${target.id}]`)
      let next = current.closest('li').nextElementSibling
      if (next) {
        next.querySelector('[data-target]').click()
      } else {
        // first item in ul
        current.closest('ul')?.querySelector('[data-target]').click()
        target.classList.remove('show')
      }
      setTimeout(() => {
        // close current
        target.classList.remove('show')
      }, 1000)
    })
  })

  // cursor
  const cursorOuter = document.querySelectorAll('.playground li')
  cursorOuter.forEach((outer) => {
    outer.addEventListener('mousemove', (e) => {
      const cursor = outer.querySelector('.cursor')
      cursor.style.top = e.clientY + 'px'
      cursor.style.left = e.clientX + 'px'
    })
  })

  // carousel (drag)
  const siders = document.querySelectorAll('.carousel')
  siders?.forEach((sider) => {
    sider.style.cursor = 'grab'

    let pos = { top: 0, left: 0, x: 0, y: 0 }

    const mouseDownHandler = function (e) {
      sider.style.cursor = 'grabbing'

      pos = {
        left: sider.scrollLeft,
        top: sider.scrollTop,
        // Get the current mouse position
        x: e.clientX,
        y: e.clientY,
      }

      document.addEventListener('mousemove', mouseMoveHandler)
      document.addEventListener('mouseup', mouseUpHandler)
    }

    const mouseMoveHandler = function (e) {
      // How far the mouse has been moved
      const dx = e.clientX - pos.x
      const dy = e.clientY - pos.y

      // Scroll the element
      sider.scrollTop = pos.top - dy
      sider.scrollLeft = pos.left - dx
    }

    const mouseUpHandler = function () {
      sider.style.cursor = 'grab'

      document.removeEventListener('mousemove', mouseMoveHandler)
      document.removeEventListener('mouseup', mouseUpHandler)
    }

    // Attach the handler
    sider.addEventListener('mousedown', mouseDownHandler)
  })

  // carousel (scroll)
  document.body.addEventListener('scroll', horizontalScroll)
  let sticky = document.querySelector('.carousel-outer')
  let stickyParent = document.querySelector('.carousel-container')
  let scrollWidth = sticky.scrollWidth
  let verticalScrollHeight = stickyParent.getBoundingClientRect().height - sticky.getBoundingClientRect().height
  //Scroll function
  function horizontalScroll() {
    //Checking whether the sticky element has entered into view or not
    let stickyPosition = sticky.getBoundingClientRect().top - 200
    console.log(stickyPosition)
    if (stickyPosition > 1) {
      return
    } else {
      let scrolled = stickyParent.getBoundingClientRect().top //how much is scrolled?
      sticky.scrollLeft = (scrollWidth / verticalScrollHeight) * -scrolled * 0.85
    }
  }
</script>

<style lang="scss">
  .work {
    position: relative;
    margin-top: 150px;
    margin-bottom: 150px;
    z-index: 100;
    .content {
      max-width: 760px;
    }
    .subtitle {
      font-size: 11px;
    }
    .title {
      font-size: 64px;
      margin: 30px 0;
      font-family: var(--font-family-secondary);
    }
    .description {
      font-size: 13px;
      margin: 0 0 70px;
      max-width: 478px;
      p {
        margin-bottom: 6px;
      }
      b {
        font-weight: bold;
      }
    }
    .more {
      font-size: 18px;
      display: flex;
      column-gap: 7px;
      align-items: center;
      text-transform: uppercase;
      margin: 20px auto 0;
      width: max-content;
      cursor: pointer;
      sup {
        margin-top: -10px;
        font-size: 12px;
      }
      svg {
        margin-top: 2px;
      }
    }
    ul {
      max-height: 540px;
      overflow: hidden;
      position: relative;
      &::after {
        content: '';
        width: 100%;
        height: 100%;
        pointer-events: none;
        background: linear-gradient(0deg, rgba(0, 0, 0, 0.95) 0%, rgba(0, 0, 0, 0.1) 100%);
        position: absolute;
        left: 0;
        top: 0;
        z-index: 1;
        transition: opacity 0.2s ease;
      }

      &:hover {
        &::after {
          transition-duration: 2s;
          opacity: 0;
        }
        li {
          opacity: 0.2;
          top: 0;
          scale: 1;
        }
      }
      li {
        transition: opacity 0.9s ease;
        &:hover {
          z-index: 2;
          position: relative;
          opacity: 1;
        }
      }
    }
    .project {
      display: grid;
      align-items: center;
      column-gap: 10px;
      cursor: pointer;
      padding: 20px 0;
      grid-template-columns: minmax(0, 1fr) repeat(2, auto);
    }
    .name {
      font-size: 18px;
      font-weight: 500;
      display: flex;
      align-items: center;
      column-gap: 10px;
      i {
        flex: 1;
        height: 1px;
        background-color: rgb(255, 255, 255, 0.1);
      }
    }

    .role {
      font-size: 13px;
    }
    .year {
      font-size: 11px;
    }

    &-description {
      position: fixed;
      top: 0;
      left: 0;
      background-color: #0d0d0d;
      transition: all 0.6s cubic-bezier(0.215, 0.61, 0.355, 1);
      width: 100%;
      z-index: 1100;
      overflow-y: auto;
      height: 100vh;
      padding: 80px 0 50px;
      &::after {
        content: '';
        width: 100%;
        height: 100%;
        position: fixed;
        pointer-events: none;
        background: linear-gradient(0deg, rgb(0, 0, 0) 0%, rgba(0, 0, 0, 0.2) 100%);
        left: 0;
        top: 0;
        z-index: 1;
        opacity: 0;
        transition: opacity 2s ease;
        transition-delay: 0.6s;
      }
      &:not(.show) {
        top: 100vw;
        opacity: 0;
        pointer-events: none;
        &::after {
          opacity: 1;
        }
      }

      video,
      img {
        pointer-events: none;
        height: 317px;
        width: auto;
      }
      button {
        background-color: transparent;
        color: #fff;
        font: inherit;
      }
      .title {
        font-size: 160px;
        margin-bottom: 54px;
        max-width: 75%;
        font-weight: 600;
      }
      .next,
      .close {
        margin-left: auto;
        display: block;
      }
      .next {
        margin-top: 80px;
      }

      .info {
        display: flex;
        justify-content: space-between;
        margin: 70px 0 80px;
        b {
          display: block;
          font-weight: 700;
          margin-bottom: 10px;
        }
      }

      .link {
        text-transform: uppercase;
        font-weight: 700;
      }
      .challenges {
        max-width: 433px;
        > li {
          text-indent: -10px;
          padding-left: 10px;
          &:not(:last-child) {
            margin-bottom: 40px;
          }
        }
      }
      .brief {
        margin-bottom: 40px;
      }
      .details {
        max-width: 595px;
        ul {
          display: grid;
          grid-template-columns: repeat(2, auto);
          row-gap: 40px;
          column-gap: 40px;
        }
      }
      .carousel {
        list-style: none;
        display: flex;
        overflow-x: auto;
        -ms-overflow-style: none; /* Internet Explorer 10+ */
        scrollbar-width: none; /* Firefox */
        width: calc(100vw - (100vw - 1712px) / 2);
        max-width: calc(100dvw - 20px);
        margin: 0 auto;
        user-select: none;
        &::-webkit-scrollbar {
          display: none; /* Safari and Chrome */
        }
        img {
          font-size: 0;
          pointer-events: none;
        }
        li {
          border-radius: 10px;
          max-height: 317px;
          margin-right: 40px;
          min-width: 557px;
          display: flex;
          justify-content: center;
          background-color: #151414;
          overflow: hidden;
        }
      }
    }
    @media (max-width: 655px) {
      margin-top: 60px;
      margin-bottom: 40px;
    }
  }

  .playground {
    max-width: 2270px;
    margin: 0 auto;
    min-height: 100vh;
    --slide-width: 557px;
    --slide-marge: 40px;
    --slide-count: 3;
    --slides-width: calc((var(--slide-width) + var(--slide-marge)) * var(--slide-count));

    .carousel-container {
      height: var(--slides-width);
    }
    .carousel-outer {
      position: sticky;
      top: 200px;
      max-height: 100vh;
      overflow-x: hidden;
      overflow-y: hidden;
    }
    .carousel-inner {
      list-style: none;
      display: flex;
    }
    .cursor {
      position: absolute;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.2s ease, scale 0.2s ease;
      transform: translateX(-50%) translateY(-50%);
      scale: 0.5;
      top: 50%;
      left: 50%;
      white-space: nowrap;
      will-change: transform;
      z-index: 10;
    }

    li {
      min-width: var(--slide-width);
      margin-right: var(--slide-marge);
      cursor: pointer;
      position: relative;
      &:hover .cursor {
        opacity: 1;
        scale: 1;
      }
    }

    .infos {
      display: flex;
      justify-content: space-between;
      padding-top: 15px;
    }

    .name {
      font-size: 20px;
      font-weight: 600;
      text-transform: uppercase;
    }

    .subtitle {
      font-size: 14px;
      display: block;
      opacity: 0.8;
      margin-top: 6px;
    }

    img {
      border-radius: 10px;
    }
    .infinite-text {
      display: flex;
      background-color: #000;
      color: #fff;
      white-space: nowrap;
      overflow: hidden;
      margin-bottom: 25px;
      p {
        font-size: 57px;
        text-transform: uppercase;
        font-weight: 700;
        will-change: transform;
        animation: loopText 2s infinite linear;
        transform: translate3d(0, 0, 0);
      }
    }
    @media (max-width: 655px) {
      .infinite-text p {
        animation-duration: 4s;
      }
    }
  }

  @keyframes loopText {
    from {
      transform: translate3d(0, 0, 0);
    }
    to {
      transform: translate3d(-100%, 0, 0);
    }
  }
</style>
