---
import { playground, projects, type Project } from '@/data/projects'
import type { ImageMetadata } from 'astro'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import WorkDetails from './WorkDetails.astro'

const imagesPlayground = import.meta.glob<{ default: ImageMetadata }>('../assets/img/playground-*.png')
const items = Array(9).fill('PLAYGROUND')
---

<section class="work container" id="projects">
  <div class="header" data-reveal>
    <p class="subtitle">Area of Expertise</p>
    <h2 class="title">Selected<br />Works</h2>
    <p class="description">
      Over the past 4 years, I've had the privilege to work on so many cool projects, iâ€™ve worked in areas including
      APIs and Integration, responsive web design, eCommerce, CMS, SEO... Here's a few.
    </p>
  </div>

  <div class="content">
    <ul>
      {
        projects.slice(0, 8).map((project: Project, key: number) => (
          <li data-reveal>
            <div class="project" data-target={`project-${key}`}>
              <p class="name">
                <span>
                  {project.name} - {project.platform}
                </span>
                <i />
              </p>
              <span class="role">{project.role}</span>
              <span class="year">{project.year}</span>
            </div>
          </li>
        ))
      }
    </ul>
    <a href="/projects" class="more" data-reveal data-astro-prefetch="viewport">
      <Icon name="arrow-top-right" width={15} height={15} />
      <u>See all projects</u>
      <sup>({projects.length + playground.length})</sup>
    </a>
  </div>
</section>

<section class="playground" id="playground">
  <div class="infinite-text" data-reveal>
    {items.map((item) => <p>{item} &nbsp;</p>)}
  </div>
  <div class="carousel-container">
    <div class="carousel-outer">
      <ul data-reveal class="carousel-inner">
        {
          playground.map((project: Project, key: number) => (
            <li data-target={`project-${key + 8}`}>
              {/* 8 is total shown projects in work section */}
              <div class="project">
                {project.images && (
                  <Image
                    src={imagesPlayground[`../assets/img/${project.images[project.images.length - 1]}.png`]()}
                    alt={project.name}
                    width="557"
                    height="533"
                  />
                )}
                <div class="infos">
                  <span class="name">{project.name}</span>
                  <span class="subtitle">{project.subtitle}</span>
                </div>
              </div>
              <div class="cursor">
                <Icon class="inner" name="cursor-top-right" width={104} height={104} />
                <Icon class="outer" name="playground-text" width={140} height={140} />
              </div>
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</section>

<WorkDetails data={[...projects.slice(0, 8), ...playground]} />

<script>
  document.addEventListener('astro:page-load', () => {
    // cursor
    document.querySelectorAll('.playground li').forEach((container) => {
      const cursor = container.querySelector('.cursor')
      if (!cursor) return
      container.addEventListener('mousemove', ({ clientX, clientY }) => {
        const { left, top } = container.getBoundingClientRect()
        cursor.style.left = `${clientX - left}px`
        cursor.style.top = `${clientY - top}px`
      })
    })

    // carousel (scroll)
    document.addEventListener('scroll', horizontalScroll)
    let sticky = document.querySelector('.playground .carousel-outer')
    let stickyParent = document.querySelector('.playground .carousel-container')
    let scrollWidth = sticky.scrollWidth
    let verticalScrollHeight = stickyParent.getBoundingClientRect().height - sticky.getBoundingClientRect().height
    let topOffset = window.innerHeight / 2 - 282

    //Scroll function
    function horizontalScroll() {
      //Checking whether the sticky element has entered into view or not
      let stickyPosition = sticky.getBoundingClientRect().top - topOffset
      if (stickyPosition > 1) {
        sticky.classList.remove('is-sticky')
      } else {
        let scrolled = stickyParent.getBoundingClientRect().top //how much is scrolled?
        sticky.scrollLeft = (scrollWidth / verticalScrollHeight) * -scrolled * 0.5
        sticky.classList.add('is-sticky')
      }
    }
  })
</script>

<style lang="scss">
  .work {
    position: relative;
    margin-top: 150px;
    margin-bottom: 150px;
    z-index: 100;
    .content {
      max-width: 760px;
    }
    .subtitle {
      font-size: 11px;
    }
    .title {
      font-size: 64px;
      margin: 30px 0;
      font-family: var(--font-family-secondary);
    }
    .description {
      font-size: 13px;
      margin: 0 0 70px;
      max-width: 478px;
      p {
        margin-bottom: 6px;
      }
      b {
        font-weight: bold;
      }
    }
    .more {
      font-size: 18px;
      display: flex;
      column-gap: 7px;
      align-items: center;
      text-transform: uppercase;
      margin: 20px auto 0;
      width: max-content;
      cursor: pointer;
      sup {
        margin-top: -10px;
        font-size: 12px;
      }
      svg {
        margin-top: 2px;
      }
    }
    ul {
      max-height: 540px;
      overflow: hidden;
      position: relative;
      &::after {
        content: '';
        width: 100%;
        height: 100%;
        pointer-events: none;
        background: linear-gradient(0deg, rgba(0, 0, 0, 0.95) 0%, rgba(0, 0, 0, 0.1) 100%);
        position: absolute;
        left: 0;
        top: 0;
        z-index: 1;
        transition: opacity 0.2s ease;
      }

      &:hover {
        &::after {
          transition-duration: 2s;
          opacity: 0;
        }
        li {
          opacity: 0.2;
          top: 0;
          scale: 1;
        }
      }
      li {
        transition: opacity 0.9s ease;
        &:hover {
          z-index: 2;
          position: relative;
          opacity: 1;
        }
      }
    }
    .project {
      display: grid;
      align-items: center;
      column-gap: 10px;
      cursor: pointer;
      padding: 20px 0;
      grid-template-columns: minmax(0, 1fr) repeat(2, auto);
    }
    .name {
      font-size: 18px;
      font-weight: 500;
      display: flex;
      align-items: center;
      column-gap: 10px;
      i {
        flex: 1;
        height: 1px;
        background-color: rgb(255, 255, 255, 0.1);
      }
    }

    .role {
      font-size: 13px;
    }
    .year {
      font-size: 11px;
    }
    @media (max-width: 655px) {
      margin-top: 60px;
      margin-bottom: 110px;
    }
  }

  .playground {
    max-width: 2270px;
    margin: 0 auto;
    min-height: 100vh;
    --slide-width: 557px;
    --slide-marge: 40px;
    --slide-count: 4;
    --slides-width: calc((var(--slide-width) + var(--slide-marge)) * var(--slide-count));
    @media (max-width: 600px) {
      --slide-width: 80vw;
    }
    .carousel-container {
      height: var(--slides-width);
    }
    .carousel-outer {
      position: sticky;
      top: calc(50% - 282px);
      padding: 70px 0;
      padding-left: var(--slide-marge);
      max-height: 100vh;
      overflow: hidden;
    }
    .carousel-inner {
      list-style: none;
      display: flex;
    }
    .cursor {
      position: absolute;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.3s ease, scale 0.3s ease;
      transition-delay: 0s;
      transform: translate(-50%, -50%);
      scale: 0.4;
      top: 50%;
      left: 50%;
      white-space: nowrap;
      will-change: transform;
      z-index: 10;
      transform-origin: 0 0;
      .outer {
        animation: rotating 30s linear infinite;
      }
      .inner {
        position: absolute;
        left: 18px;
        top: 18px;
        opacity: 0.9;
      }
    }

    li {
      min-width: var(--slide-width);
      margin-right: var(--slide-marge);
      cursor: pointer;
      position: relative;
      &:hover .cursor {
        transition-delay: 0.3s;
        opacity: 1;
        scale: 1;
      }
    }

    .infos {
      padding-top: 15px;
      font-size: 14px;
    }

    .name {
      text-transform: uppercase;
      font-weight: 600;
    }

    .subtitle {
      opacity: 0.8;
    }

    img {
      border-radius: 10px;
    }
    .infinite-text {
      display: flex;
      background-color: #000;
      color: #fff;
      white-space: nowrap;
      overflow: hidden;
      p {
        font-size: 57px;
        text-transform: uppercase;
        font-weight: 700;
        will-change: transform;
        animation: loopText 2s infinite linear;
        transform: translate3d(0, 0, 0);
      }
    }
    @media (max-width: 655px) {
      .infinite-text p {
        animation-duration: 4s;
      }
      .cursor {
        display: none;
      }
    }
  }
</style>
