---
import type { Project } from '@/data/projects'
import type { ImageMetadata } from 'astro'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import drag from '../assets/img/drag-left.gif'

const imagesProjects = import.meta.glob<{ default: ImageMetadata }>('../assets/img/project-*.png')
const videos = import.meta.glob<{ default: string }>('../assets/videos/*.mp4', { eager: true })
const { data } = Astro.props
---

{
  data.map((project: Project, key: number) => (
    <div class="work-description" id={`project-${key}`}>
      <div class="container">
        <button class="close" title="esc">
          Close{' '}
          <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="none" viewBox="0 0 10 10">
            <path stroke="#fff" stroke-linecap="round" stroke-linejoin="round" d="M5 5 1 9m4-4L1 1m4 4 4-4M5 5l4 4" />
          </svg>
        </button>
        <p class="title">{project.name}</p>
        {project.link &&
          (typeof project.link !== 'object' ? (
            <a class="link" target="_blank" href={'https://' + project.link}>
              {project.link}
              <Icon name="arrow-top-right" width={10} height={10} />
            </a>
          ) : (
            Object.entries(project.link).map(([key, value]) => <a href={value}>{key}</a>)
          ))}
        <div class="info">
          <div class="details">
            <p class="brief">{project.description}</p>
            <ul>
              <li>
                <b>Industry</b>
                {project.industry}
              </li>
              <li>
                <b>Status</b>
                {project.status}
              </li>
              <li>
                <b>Technologies</b>
                {project.techs?.join(', ')}
              </li>
              <li>
                <b>Role</b>
                {project.role}
              </li>
            </ul>
          </div>
          <ul class="challenges">
            {project.challenges && (
              <li>
                <b>Challenges</b>
                <ul>
                  {project.challenges.map((challenge) => (
                    <li>⬩ {challenge}.</li>
                  ))}
                </ul>
              </li>
            )}
            {project.solutions && (
              <li>
                <b>Solutions</b>
                <ul>
                  {project.solutions.map((solution) => (
                    <li>⬩ {solution}.</li>
                  ))}
                </ul>
              </li>
            )}
          </ul>
        </div>
        <div class="carousel-outer">
          <ul class="carousel">
            {(project.status === 'PLAYGROUND' ? project.images!.slice(0, -1) : project.images)?.map((src: string) => (
              <li class:list={[{ video: !Number(src) }]}>
                {!!Number(src) ? (
                  <Image
                    src={imagesProjects[`../assets/img/project-${src}.png`]()}
                    alt={project.name}
                    width="557"
                    height="317"
                  />
                ) : (
                  <video autoplay muted loop playsinline>
                    <source src={videos[`../assets/videos/${src}.mp4`]?.default} type="video/mp4" />
                    Your browser does not support the video tag.
                  </video>
                )}
              </li>
            ))}
          </ul>
          <Icon class="carousel-cursor" name="drag-cursor" width={80} height={80} />
        </div>
        <Image src={drag} alt="drag" width="30" height="30" class="drag-mobile" format="gif" />
        <div class="actions">
          <button class="prev">
            <Icon class="actions-icon" name="right-key" width={22} height={25} /> Previous project
          </button>
          <button class="next">
            Next project <Icon class="actions-icon" name="right-key" width={22} height={25} />
          </button>
        </div>
      </div>
    </div>
  ))
}

<script>
  document.addEventListener('astro:page-load', () => {
    // cursor
    document.querySelectorAll('.work-description .carousel-outer').forEach((carousel) => {
      const cursor = carousel.querySelector('.carousel-cursor')
      const carouselInner = carousel.querySelector('.carousel')
      if (!cursor) {
        return
      }

      const updateCursorVisibility = () => {
        if (carouselInner.scrollWidth > carouselInner.clientWidth) {
          cursor.style.display = 'block' // Show cursor if carousel is scrollable
        } else {
          cursor.style.display = 'none' // Hide cursor if carousel is not scrollable
        }
      }

      updateCursorVisibility()
      window.addEventListener('resize', updateCursorVisibility)

      carousel.addEventListener('mousemove', ({ clientX, clientY }) => {
        const { left, top } = carousel.getBoundingClientRect()
        cursor.style.left = `${clientX - left}px`
        cursor.style.top = `${clientY - top}px`
      })
    })

    // show details
    document.querySelectorAll('[data-target]').forEach((project) => {
      project.addEventListener('click', () => {
        let target = document.querySelector(`#${project.dataset.target}`)
        target.classList.add('show')
        document.body.style.overflow = 'hidden'
      })
    })

    // close
    document.querySelectorAll('.work-description .close').forEach((button) => {
      button.addEventListener('click', () => {
        let target = button.closest('.work-description')
        target.classList.remove('show')
        document.body.style.overflow = 'unset'
      })
    })

    // next/prev
    const navigate = (button, next) => {
      let target = button.closest('.work-description')
      let current = document.querySelector(`[data-target=${target.id}]`)
      let currentLi = current.closest('li')
      let nextOrPrev = next ? currentLi.nextElementSibling : currentLi.previousElementSibling
      if (nextOrPrev && !nextOrPrev.classList.contains('thead')) {
        ;(nextOrPrev.querySelector('[data-target]') ?? nextOrPrev).click()
      } else {
        const ul = current.closest('ul')
        // Go to first/last item in ul depnding on prev/next (where if it's a table go to 2nd to skip thead)
        const isTable = ul.classList.contains('table')
        const isCarousel = ul.classList.contains('carousel-inner')
        ul.querySelector(
          `li:${next ? (isTable ? 'nth-child(2)' : 'first-child') : 'last-child'}${isCarousel ? '' : ' [data-target]'}`
        ).click()
        target.classList.remove('show')
      }
      setTimeout(
        () => {
          // close current
          target.classList.remove('show')
        },
        next ? 1000 : 0
      )
    }
    document.querySelectorAll('.work-description .actions button').forEach((button) => {
      button.addEventListener('click', () => {
        navigate(button, button.classList.contains('next'))
      })
    })
    document.addEventListener(
      'keydown',
      (e) => {
        const next = document.querySelector('.work-description.show .next')
        const prev = document.querySelector('.work-description.show .prev')
        const close = document.querySelector('.work-description.show .close')
        const ArrowRight = e.key === 'ArrowRight'
        const ArrowLeft = e.key === 'ArrowLeft'
        const Escape = e.key === 'Escape'
        if ((ArrowLeft || ArrowRight || Escape) && !!next) {
          e.preventDefault()
          if (Escape) {
            close?.dispatchEvent(new Event('click'))
          } else {
            navigate(ArrowRight ? next : prev, ArrowRight)
          }
          return false
        }
      },
      false
    )

    // carousel (drag)
    const siders = document.querySelectorAll('.carousel')
    siders?.forEach((sider) => {
      let pos = { top: 0, left: 0, x: 0, y: 0 }
      const cursor = sider.nextElementSibling

      const mouseDownHandler = function (e) {
        cursor.classList.add('grabbing')

        pos = {
          left: sider.scrollLeft,
          top: sider.scrollTop,
          // Get the current mouse position
          x: e.clientX,
          y: e.clientY,
        }

        document.addEventListener('mousemove', mouseMoveHandler)
        document.addEventListener('mouseup', mouseUpHandler)
      }

      const mouseMoveHandler = function (e) {
        // How far the mouse has been moved
        const dx = e.clientX - pos.x
        const dy = e.clientY - pos.y

        // Scroll the element
        sider.scrollTop = pos.top - dy
        sider.scrollLeft = pos.left - dx
      }

      const mouseUpHandler = function () {
        cursor.classList.remove('grabbing')

        document.removeEventListener('mousemove', mouseMoveHandler)
        document.removeEventListener('mouseup', mouseUpHandler)
      }

      // Attach the handler
      sider.addEventListener('mousedown', mouseDownHandler)
    })
  })
</script>

<style lang="scss">
  @use '../assets/scss/base/mixins' as *;
  .work-description {
    position: fixed;
    top: 0;
    left: 0;
    background-color: #0d0d0d;
    transition: all 0.6s cubic-bezier(0.215, 0.61, 0.355, 1);
    width: 100%;
    z-index: 1100;
    overflow-y: auto;
    height: 100vh;
    padding: 80px 0 50px;
    &::after {
      content: '';
      width: 100%;
      height: 100%;
      position: fixed;
      pointer-events: none;
      background: linear-gradient(0deg, rgb(0, 0, 0) 0%, rgba(0, 0, 0, 0.2) 100%);
      left: 0;
      top: 0;
      z-index: 1;
      opacity: 0;
      transition: opacity 2s ease;
      transition-delay: 0.6s;
    }
    &:not(.show) {
      top: 100vw;
      opacity: 0;
      pointer-events: none;
      &::after {
        opacity: 1;
      }
    }

    video,
    img {
      pointer-events: none;
      height: 317px;
      width: auto;
    }
    button {
      background-color: transparent;
      color: #fff;
      font: inherit;
    }
    .title {
      margin-bottom: 54px;
      max-width: 75%;
      font-weight: 600;
      @include clamp(font-size, 60px, 9vw, 160px);
      @media (max-width: 900px) {
        max-width: 100%;
      }
    }
    .close {
      position: sticky;
      top: 0px;
      margin-left: auto;
      display: block;
    }
    .actions {
      margin-top: 80px;
      justify-content: center;
      display: flex;
      column-gap: 20px;
      button {
        display: flex;
        align-items: center;
        column-gap: 7px;
        &:hover svg {
          opacity: 0.9;
        }
      }
      &-icon {
        transition: opacity 0.2s ease;
      }
      .prev svg {
        transform: scale(-1, 1);
      }
    }

    .info {
      display: flex;
      justify-content: space-between;
      margin: 70px 0 80px;
      b {
        display: block;
        font-weight: 700;
        margin-bottom: 10px;
      }
      @media (max-width: 1070px) {
        flex-direction: column;
        row-gap: 50px;
      }
    }

    .link {
      text-transform: uppercase;
      font-weight: 700;
      svg {
        margin-left: 5px;
      }
    }
    .challenges {
      max-width: 433px;
      > li {
        text-indent: -10px;
        padding-left: 10px;
        &:not(:last-child) {
          margin-bottom: 40px;
        }
      }
    }
    .brief {
      margin-bottom: 40px;
    }
    .details {
      max-width: 595px;
      ul {
        display: grid;
        grid-template-columns: repeat(2, auto);
        row-gap: 40px;
        column-gap: 40px;
      }
    }
    .carousel {
      list-style: none;
      display: flex;
      overflow-x: auto;
      -ms-overflow-style: none; /* Internet Explorer 10+ */
      scrollbar-width: none; /* Firefox */
      width: calc(100vw - (100vw - 1710px) / 2);
      margin: 0 auto;
      user-select: none;
      max-width: calc(100vw - 45px);

      @media (max-width: 655px) {
        max-width: calc(100vw - 25px);
      }
      &::-webkit-scrollbar {
        display: none; /* Safari and Chrome */
      }
      img {
        font-size: 0;
        pointer-events: none;
      }
      li {
        border-radius: 10px;
        max-height: 317px;
        margin-right: 40px;
        min-width: 557px;
        display: flex;
        justify-content: center;
        background-color: #151414;
        overflow: hidden;
        &:not(.video) {
          animation-duration: 1.8s;
          animation-fill-mode: forwards;
          animation-iteration-count: infinite;
          animation-name: loading;
          animation-timing-function: linear;
          background: #151414;
          background: linear-gradient(to right, #151414 0%, rgba(245, 245, 245, 0.04) 28%, #151414 50%);
          background-size: 700px;
        }
      }

      &-cursor {
        position: absolute;
        opacity: 0;
        pointer-events: none;
        transition: opacity 0.3s ease, scale 0.2s ease;
        transform: translate(-50%, -50%);
        top: 50%;
        left: 50%;
        will-change: transform;
        z-index: 10;
        transform-origin: 0 0;
        mix-blend-mode: difference;
        scale: 0.4;
        &.grabbing {
          scale: 0.8 !important;
        }
      }
      &-outer {
        position: relative;
        &:hover .carousel-cursor {
          opacity: 1;
          scale: 1;
        }
      }
    }
    .drag-mobile {
      width: 40px;
      height: 40px;
      margin: 16px auto 0;
      display: none;
      @media (hover: none) {
        display: block;
      }
    }
  }
</style>
