---
import '../assets/scss/globals.scss'
import type { CollectionEntry } from 'astro:content'
import SiteMeta from '../components/SiteMeta.astro'
import Header from '../components/Header.astro'
import Footer from '../components/Footer.astro'

import { useTranslations } from '@/i18n'

const t = useTranslations()

interface Props {
  title: string
  description: string
  titleTemplate?: string
  robots?: string
  article?: {
    publishedTime: Date
    modifiedTime?: Date
    authors: string[]
    authorTwitter?: string
    tags: string[]
    cover: CollectionEntry<'blog'>['data']['cover']
  }
}
---

<html lang={t('siteMetadata.language')} dir="ltr">
  <head>
    <SiteMeta {...Astro.props} />
  </head>
  <body style="background-color: #000;">
    <div id="loader" style="display: none;"></div>
    <div id="main">
      <Header />
      <main id="main-content" transition:animate="fade">
        <slot />
        <i id="overlay"></i>
      </main>
      <Footer />
    </div>

    <!-- <div id="revealPoint">Reveal Point</div> -->
    <script>
      document.addEventListener('click', (event) => {
        const linkElement = event.target.closest('a')

        if (linkElement) {
          const href = linkElement.href
          const currentUrl = window.location.href

          // Parse the URLs to compare the pathnames
          const linkUrl = new URL(href, currentUrl) // resolves relative URLs
          const currentPathname = window.location.pathname
          const linkPathname = linkUrl.pathname

          // If the path is the same, and there's only a hash change (scroll), don't show the loader
          if (currentPathname === linkPathname && linkUrl.hash) {
            return
          }

          // If navigating to a different page, show the loader
          const loader = document.getElementById('loader')
          if (loader) {
            document.getElementById('loader').style.display = 'flex'
            document.getElementById('main').style.display = 'none'

            // Greeting loading
            const loadingMessages = [
              'Loading...',
              'Cargando...',
              'Chargement...',
              'Laden...',
              'Caricamento...',
              '読み込み中...',
              '로딩 중...',
              '加载中...',
              'Загрузка...',
              'Carregando...',
              'جار التحميل...',
              'लोड हो रहा है...',
            ]

            let currentGreeting = 0
            setInterval(() => {
              loader.textContent = loadingMessages[currentGreeting]
              currentGreeting = (currentGreeting + 1) % loadingMessages.length
            }, 120)
          }
        }
      })

      document.addEventListener('astro:page-load', () => {
        // reveal
        document.addEventListener('scroll', () => {
          const revealPoint = 200
          const revealElement = document.querySelectorAll('[data-reveal]')
          for (var i = 0; i < revealElement.length; i++) {
            const windowHeight = window.innerHeight
            const revealTop = revealElement[i].getBoundingClientRect().top
            if (revealTop < windowHeight - revealPoint) {
              revealElement[i].classList.add('active')
            } else {
              revealElement[i].classList.remove('active')
            }
          }
        })
      })
    </script>
  </body>
</html>
