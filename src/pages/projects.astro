---
import WorkDetails from '@/components/WorkDetails.astro'
import { playground, projects } from '@/data/projects'
import DefaultLayout from '../layouts/DefaultLayout.astro'

// Combine and sort the projects
const allProjects = [...projects, ...playground]
  .map((data, key) => ({ ...data, key }))
  .sort((a, b) => b.year - a.year || a.name.localeCompare(b.name))
const badge = (status: string) => (['PLAYGROUND', 'STUDY CASE'].includes(status) ? status : '')
---

<DefaultLayout
  title="Saida Lachgar - Frontend Web Developer Project Showcase"
  description="Showcase of innovative projects developed by a highly skilled developer. Explore diverse industries, technologies, and challenges overcome in the fields of eCommerce, Tourism, Healthcare, and more."
>
  <section class="container" id="projects">
    <div class="header">
      <h1 class="title">All<br />Projects</h1>
      <p class="seo-text">
        Welcome to my portfolio! Discover the projects that demonstrate my expertise in web development,
        problem-solving, and innovative solutions across various industries.
      </p>
    </div>

    <div class="content">
      <ul>
        <li class="thead">
          <input type="text" id="filter-year" placeholder="Year" />
          <input type="text" id="filter-role" placeholder="Role" />
          <input type="text" id="filter-name" placeholder="Name" />
          <input type="text" id="filter-platform" placeholder="Platform" />
          <input type="text" id="filter-industry" placeholder="Industry" />
        </li>
        {
          allProjects.map((project) => (
            <li data-reveal>
              <div class="project" data-target={`project-${project.key}`}>
                <span class="year">{project.year ?? '-'}</span>
                <span class="role">{project.role ?? '-'}</span>
                <h2 class="name">
                  {project.name ?? '-'}&nbsp;
                  <span class="badge">{badge(project.status)}</span>
                </h2>
                <span class="platform">{project.platform ?? '-'}</span>
                <span class="industry">{project.industry ?? '-'}</span>
              </div>
            </li>
          ))
        }
      </ul>
    </div>
  </section>
  <WorkDetails data={[...projects, ...playground]} client:idle />
</DefaultLayout>

<script>
  document.addEventListener('astro:page-load', () => {
    const cells = ['year', 'role', 'name', 'platform', 'industry']
    document.addEventListener('input', () => {
      const filters = cells.map((id) => document.getElementById(`filter-${id}`).value.toLowerCase())
      console.log('filters', filters)

      document.querySelectorAll('.project').forEach((project) => {
        const matches = cells.every((id, i) =>
          project.querySelector(`.${id}`).textContent.toLowerCase().includes(filters[i])
        )
        console.log('matches', matches)
        project.classList.toggle('hidden', !matches)
      })
    })
  })
</script>

<style lang="scss">
  @use '../assets/scss/base/mixins' as *;
  .title {
    font-size: min(max(60px, 14vw), 240px);
    font-weight: 700;
    text-transform: uppercase;
    line-height: 1.1;
    margin: 15vh 0 40px;
    text-align: right;
    animation: reveal 1.6s cubic-bezier(0.77, 0, 0.175, 1) 0.4s forwards;
  }
  .badge {
    font-size: 10px;
    text-transform: lowercase;
    border: 1px solid #fff;
    border-radius: 5px;
    padding: 1px 4px 3px;
    &:empty {
      display: none;
    }
  }
  .thead,
  .project {
    display: grid;
    grid-template-columns: repeat(5, minmax(0, 1fr));
    border-bottom: 1px solid rgba(255, 255, 255, 0.5);
    > * {
      padding: 15px 0;
      font-weight: 400;
      font-size: 14px;
      line-height: 1;
    }
    input {
      background-color: #000;
      color: #fff;
      border: 0;
      &:focus-visible,
      &:focus {
        box-shadow: none;
        outline: 0;
      }
      &::placeholder {
        opacity: 1;
        color: #fff;
      }
    }
  }
  .content {
    animation: reveal 1.6s cubic-bezier(0.77, 0, 0.175, 1) 0.4s forwards;
  }
  .project {
    cursor: pointer;
    &:hover {
      background-color: rgba(255, 255, 255, 0.08);
      z-index: 1000;
    }
    &.hidden {
      display: none;
    }
    .name {
      text-transform: uppercase;
    }
  }
</style>
